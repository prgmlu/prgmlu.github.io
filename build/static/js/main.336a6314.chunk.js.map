{"version":3,"sources":["components/BlogPostLayout.module.css","components/Pagination.module.css","utils/formats.js","components/ArticleMeta.js","components/ArticleMeta.module.css","components/BlogIndexPage.module.css","siteMetadata.js","components/Bio.js","utils/getGravatarURL.js","components/Pagination.js","components/BlogIndexPage.js","components/NotFoundPage.js","components/LoadingIndicator.js","components/BlogLayout.js","components/BlogPostLayout.js","routes/posts/index.js","routes/index.js","components/LoadingIndicator.module.css","components/BlogLayout.module.css","components/ArticleSummary.js","components/ArticleSummary.module.css","components/Bio.module.css","serviceWorker.js","index.js"],"names":["module","exports","title","header","footer","bio","links","next","content","Pagination","previous","months","ArticleMeta","_ref","readingTimeElement","blogRoot","meta","readingTime","minutes","Math","max","round","cups","react_default","a","createElement","Fragment","className","styles","Array","fill","join","dateTime","date","toUTCString","dateString","Date","monthName","getMonth","dayOfMonth","getDate","fourDigitYear","getFullYear","concat","formatDate","tags","length","map","tag","key","es","href","articlesList","siteMetadata","author","description","indexPageSize","Bio","props","photoURL","email","size","_ref$defaultURL","defaultURL","hash","md5","toLowerCase","trim","encodeURIComponent","getGravatarURL","src","alt","pageCount","pageNumber","dist_es","String","pages","current","count","BlogIndexPage","postRoutes","components_Bio","route","url","ArticleSummary","components_Pagination","target","style","float","NotFoundPage","NotFound","LoadingIndicator","active","BlogLayout","isViewingIndex","loadingRoute","useLoadingRoute","container","components_LoadingIndicator","render","components_NotFoundPage","BlogPostLayout","_useCurrentRoute","useCurrentRoute","data","_useView","useView","connect","head","MDXComponent","pathname","esm","components","Link","wrapper","_ref2","children","previousDetails","nextDetails","postModules","./2020-01-05-welcome/post.js","__webpack_require__","e","then","bind","./2020-01-07-linux/post.js","./2020-01-08-ssh/post.js","importPost","postPathnames","Object","keys","datePattern","postDetails","slug","slugify","replace","dateMatch","match","parseInt","posts","sortBy","reverse","i","getPage","Navi","post","getContent","previousSlug","previousPost","nextSlug","nextPost","previousPostDetails","nextPostDetails","regenerator_default","async","_context2","prev","awrap","sent","default","objectWithoutProperties","abrupt","getData","req","context","objectSpread2","getView","_ref3","other","_context","stop","chunks","chunk","chunkPagePairs","pageTitle","method","Promise","all","resolve","routes","view","components_BlogIndexPage","compose","withContext","mountpath","withView","path","test","components_BlogLayout","mount","/","shift","/page","/1","redirect","fromPairs","/posts","components_BlogPostLayout","/tags","lazy","/about","/rss","LoadingIndicator-animation","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_navi__WEBPACK_IMPORTED_MODULE_1__","_ArticleMeta__WEBPACK_IMPORTED_MODULE_2__","_ArticleSummary_module_css__WEBPACK_IMPORTED_MODULE_3__","_ArticleSummary_module_css__WEBPACK_IMPORTED_MODULE_3___default","spoiler","Boolean","window","location","hostname","ReactGA","initialize","register","main","navigation","createBrowserNavigation","getRoute","process","renderer","ReactDOM","hydrate","react_navi_helmet_async_dist_es","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.336a6314.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"BlogPostLayout_title__2L_2_\",\"header\":\"BlogPostLayout_header__1Ny4T\",\"footer\":\"BlogPostLayout_footer__3ofxa\",\"bio\":\"BlogPostLayout_bio__diNn9\",\"links\":\"BlogPostLayout_links__-LX2X\",\"next\":\"BlogPostLayout_next__KrMHx\",\"content\":\"BlogPostLayout_content__1mzTO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Pagination\":\"Pagination_Pagination__2Xt2h\",\"previous\":\"Pagination_previous__1akUm\",\"next\":\"Pagination_next__7Ba4Y\"};","export let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\nexport function formatDate(dateString) {\n  let date = new Date(dateString)\n  let monthName = months[date.getMonth()]\n  let dayOfMonth = date.getDate()\n  let fourDigitYear = date.getFullYear()\n\n  return `${monthName} ${dayOfMonth}, ${fourDigitYear}`\n}","import { join } from 'path'\nimport React from 'react'\nimport { Link } from 'react-navi'\nimport { formatDate } from '../utils/formats'\nimport styles from './ArticleMeta.module.css'\n\nfunction ArticleMeta({ blogRoot, meta, readingTime }) {\n  let readingTimeElement\n  if (readingTime) {\n    let minutes = Math.max(Math.round(readingTime.minutes), 1)\n    let cups = Math.round(minutes / 5);\n    readingTimeElement =\n      <React.Fragment>\n        {' '}&bull;{' '}\n        <span className={styles.readingTime}>\n          {new Array(cups || 1).fill('☕️').join('')} {minutes} min read\n        </span>\n      </React.Fragment>\n  }\n      \n  return (\n    <small className={styles.ArticleMeta}>\n      <time dateTime={meta.date.toUTCString()}>{formatDate(meta.date)}</time>\n      {\n        meta.tags &&\n        meta.tags.length &&\n        <>\n          {' '}&bull;{' '}\n          <ul className={styles.tags}>\n            {meta.tags.map(tag =>\n              <li key={tag}>\n                <Link href={join(blogRoot, 'tags', tag)}>{tag}</Link>\n              </li>\n            )}\n          </ul>\n        </>\n      }\n      {readingTimeElement || null}\n    </small>\n  )\n}\n\nexport default ArticleMeta","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tags\":\"ArticleMeta_tags__1IJ9w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"BlogIndexPage_title__341hM\",\"articlesList\":\"BlogIndexPage_articlesList__1V39R\",\"footer\":\"BlogIndexPage_footer__1vkZQ\"};","export default {\n  // The blog's title as it appears in the layout header, and in the document\n  // <title> tag.\n  title: \"Python-Linux-Javascript\",\n\n  author: \"Mostafa Elkabany\",\n  description: \"Short blogs about Python, Linux, Javascript.\",\n\n  // The number of posts to a page on the site index.\n  indexPageSize: 10,\n}\n","import React from 'react'\nimport styles from './Bio.module.css'\nimport { getGravatarURL } from '../utils/getGravatarURL'\n\nfunction Bio(props) {\n  let photoURL = getGravatarURL({\n    email: \"gmelkabany@gmail.com\",\n    size: 56,\n  })\n\n  return (\n    <div className={`\n      ${styles.Bio}\n      ${props.className || ''}\n    `}>\n      <img src={photoURL} alt=\"Me\" />\n      <p>\n        Useful Tutorials in Useful topics.{' '}\n        <br />\n        Hire me!{' '}\n        <a href=\"https://www.upwork.com/freelancers/~013c25dd09c0c6d200\">Moustafa Elkabany</a>.\n        <br />\n        Follow me on <a href=\"https://twitter.com/mostafakab\">twitter.</a>.\n        {/* <a href=\"https://overreacted.io/\">overreacted.io</a>.<br /> */}\n        {/* Based on{' '} */}\n        {/* <a href=\"https://facebook.github.io/create-react-app/\"> */}\n          {/* create-react-app */}\n        {/* </a> */}\n        {/* , <a href=\"https://mdxjs.com/\">MDX</a>, and{' '} */}\n        {/* <a href=\"https://frontarm.com/navi/\">Navi</a>. */}\n      </p>\n    </div>\n  )\n}\n\nexport default Bio\n","import md5 from 'blueimp-md5'\n\nexport function getGravatarURL({ email, size, defaultURL = 'identicon' }) {\n  let hash = md5(email.toLowerCase().trim())\n  return `https://www.gravatar.com/avatar/${hash}.jpg?s=${size}&d=${encodeURIComponent(defaultURL)}`\n}\n","import { join } from 'path'\nimport React from 'react'\nimport { Link } from 'react-navi'\nimport styles from './Pagination.module.css'\n\nfunction Pagination({ blogRoot, pageCount, pageNumber }) {\n  return (\n    <small className={styles.Pagination}>\n      {\n        pageNumber !== 1 &&\n        <Link\n          className={styles.previous}\n          href={join(blogRoot, 'page', String(pageNumber - 1))}>\n          ← Previous\n        </Link>\n      }\n      <span className={styles.pages}>\n        {' '}Page <span className={styles.current}>{pageNumber}</span>/<span className={styles.count}>{pageCount}</span>{' '}\n      </span>\n      {\n        pageNumber < pageCount &&\n        <Link\n          className={styles.next}\n          href={join(blogRoot, 'page', String(pageNumber + 1))}>\n          Next →\n        </Link>\n      }\n    </small>\n  )\n}\n\nexport default Pagination","import React from 'react'\nimport { Link } from 'react-navi'\nimport siteMetadata from '../siteMetadata'\nimport ArticleSummary from './ArticleSummary'\nimport Bio from './Bio'\nimport Pagination from './Pagination'\nimport styles from './BlogIndexPage.module.css'\n\nfunction BlogIndexPage({ blogRoot, pageCount, pageNumber, postRoutes }) {\n  return (\n    <div>\n      <header>\n        <h1 className={styles.title}>\n          <Link href={blogRoot}>{siteMetadata.title}</Link>\n        </h1>\n        <Bio />\n      </header>\n      <ul className={styles.articlesList}>\n        {postRoutes.map(route => (\n          <li key={route.url.href}>\n            <ArticleSummary blogRoot={blogRoot} route={route} />\n          </li>\n        ))}\n      </ul>\n      {pageCount > 1 && (\n        <Pagination\n          blogRoot={blogRoot}\n          pageCount={pageCount}\n          pageNumber={pageNumber}\n        />\n      )}\n      <footer className={styles.footer}>\n        <div>\n          <a href=\"/rss.xml\" target=\"_blank\" style={{ float: 'right' }}>\n            RSS\n          </a>\n          <Link href=\"/about\">About</Link> &bull; <Link href=\"/tags\">Tags</Link>{' '}\n          &bull;{' '}\n          <a href=\"https://github.com/prgmlu/prgmlu.github.io\">Source</a>\n        </div>\n      </footer>\n    </div>\n  )\n}\n\nexport default BlogIndexPage\n","import React from 'react'\nimport styles from './NotFoundPage.module.css'\n\n// Note that create-react-navi-app will always show an error screen when this\n// is rendered. This is because the underlying react-scripts package shows\n// the error screen when a NotFoundError is thrown, even though it's caught\n// by <NotFoundBoundary>. To see the error rendered by this function,\n// you'll just need to close the error overlay with the \"x\" at the top right.\nfunction NotFoundPage() {\n  return (\n    <div className={styles.NotFound}>\n      <h1>404 - Not Found</h1>\n    </div>\n  )\n}\n\nexport default NotFoundPage","import React from 'react'\nimport styles from './LoadingIndicator.module.css'\n\nfunction LoadingIndicator({ active, className, style }) {\n  return (\n    <div\n      className={`\n        ${styles.LoadingIndicator}\n        ${active ? styles.active : ''}\n        ${className}\n      `}\n      style={style}\n    />\n  )\n}\n\nexport default LoadingIndicator","import React from 'react'\nimport {\n  View,\n  Link,\n  NotFoundBoundary,\n  useLoadingRoute,\n} from 'react-navi'\nimport siteMetadata from '../siteMetadata'\nimport NotFoundPage from './NotFoundPage'\nimport LoadingIndicator from './LoadingIndicator'\nimport styles from './BlogLayout.module.css'\n\nfunction BlogLayout({ blogRoot, isViewingIndex }) {\n  let loadingRoute = useLoadingRoute()\n\n  return (\n    <div className={styles.container}>\n      <LoadingIndicator active={!!loadingRoute} />\n\n      {// Don't show the header on index pages, as it has a special header.\n      !isViewingIndex && (\n        <header>\n          <h3 className={styles.title}>\n            <Link href={blogRoot}>{siteMetadata.title}</Link>\n          </h3>\n        </header>\n      )}\n\n      <main>\n        <NotFoundBoundary render={() => <NotFoundPage />}>\n          <View />\n        </NotFoundBoundary>\n      </main>\n    </div>\n  )\n}\n\nexport default BlogLayout\n","import React from 'react'\nimport { Link, useCurrentRoute, useView } from 'react-navi'\nimport { MDXProvider } from '@mdx-js/react'\nimport siteMetadata from '../siteMetadata'\nimport ArticleMeta from './ArticleMeta'\nimport Bio from './Bio'\nimport styles from './BlogPostLayout.module.css'\n\nfunction BlogPostLayout({ blogRoot }) {\n  let { title, data, url } = useCurrentRoute()\n  let { connect, content, head } = useView()\n  let { MDXComponent, readingTime } = content\n\n  // The content for posts is an MDX component, so we'll need\n  // to use <MDXProvider> to ensure that links are rendered\n  // with <Link>, and thus use pushState.\n  return connect(\n    <>\n      {head}\n      <article className={styles.container}>\n        <header className={styles.header}>\n          <h1 className={styles.title}>\n            <Link href={url.pathname}>{title}</Link>\n          </h1>\n          <ArticleMeta\n            blogRoot={blogRoot}\n            meta={data}\n            readingTime={readingTime}\n          />\n        </header>\n        <MDXProvider components={{\n          a: Link,\n          wrapper: ({ children }) =>\n            <div className={styles.content}>\n              {children}\n            </div>\n        }}>\n          <MDXComponent />\n        </MDXProvider>\n        <footer className={styles.footer}>\n          <h3 className={styles.title}>\n            <Link href={blogRoot}>\n              {siteMetadata.title}\n            </Link>\n          </h3>\n          <Bio className={styles.bio} />\n          <section className={styles.links}>\n            {\n              data.previousDetails &&\n              <Link className={styles.previous} href={data.previousDetails.href}>\n                ← {data.previousDetails.title}\n              </Link>\n            }\n            {\n              data.nextDetails &&\n              <Link className={styles.next} href={data.nextDetails.href}>\n                {data.nextDetails.title} →\n              </Link>\n            }\n          </section>\n        </footer>\n      </article>\n    </>\n  )\n}\n\nexport default BlogPostLayout","import importAll from 'import-all.macro'\nimport * as Navi from 'navi'\nimport { join } from 'path'\nimport { sortBy } from 'lodash'\nimport slugify from 'slugify'\n\n// Get a list of all posts, that will not be loaded until the user\n// requests them.\nconst postModules = importAll.deferred('./**/post.js')\nconst importPost = pathname => postModules[pathname]()\nconst postPathnames = Object.keys(postModules)\nconst datePattern = /^((\\d{1,4})-(\\d{1,4})-(\\d{1,4}))[/-]/\n\nlet postDetails = postPathnames.map(pathname => {\n  let slug = slugify(\n    pathname.replace(/post.jsx?$/, '').replace(/(\\d)\\/(\\d)/, '$1-$2'),\n  )\n    .replace(/^[-.]+|[.-]+$/g, '')\n    .replace(datePattern, '$1/')\n\n  let date\n  let dateMatch = slug.match(datePattern)\n  if (dateMatch) {\n    date = new Date(dateMatch[2], parseInt(dateMatch[3]) - 1, dateMatch[4])\n  }\n\n  return {\n    slug,\n    pathname,\n    date,\n  }\n})\n\n// Sort the pages by slug (which contain the dates)\npostDetails = sortBy(postDetails, ['slug']).reverse()\n\n// Create url-friendly slugs from post pathnames, and a `getPage()` function\n// that can be used to load and return the post's Page object.\nlet posts = postDetails.map(({ slug, pathname, date }, i) => ({\n  getPage: Navi.map(async () => {\n    let { default: post } = await importPost(pathname)\n    let { title, getContent, ...meta } = post\n    let previousSlug, previousPost, nextSlug, nextPost\n\n    if (i !== 0) {\n      let previousPostDetails = postDetails[i - 1]\n      previousPost = (await importPost(previousPostDetails.pathname)).default\n      previousSlug = previousPostDetails.slug\n    }\n\n    if (i + 1 < postDetails.length) {\n      let nextPostDetails = postDetails[i + 1]\n      nextPost = (await importPost(nextPostDetails.pathname)).default\n      nextSlug = nextPostDetails.slug\n    }\n\n    return Navi.route({\n      title,\n      getData: (req, context) => ({\n        date,\n        pathname,\n        slug,\n        previousDetails: previousPost && {\n          title: previousPost.title,\n          href: join(context.blogRoot, 'posts', previousSlug),\n        },\n        nextDetails: nextPost && {\n          title: nextPost.title,\n          href: join(context.blogRoot, 'posts', nextSlug),\n        },\n        ...meta,\n      }),\n      getView: async () => {\n        let { default: MDXComponent, ...other } = await getContent()\n        return { MDXComponent, ...other }\n      },\n    })\n  }),\n  slug,\n}))\n\nexport default posts\n","import {\n  compose,\n  lazy,\n  map,\n  mount,\n  redirect,\n  resolve,\n  route,\n  withContext,\n  withView,\n} from 'navi'\nimport React from 'react'\nimport { join } from 'path'\nimport { chunk, fromPairs } from 'lodash'\nimport BlogIndexPage from '../components/BlogIndexPage'\nimport BlogLayout from '../components/BlogLayout'\nimport BlogPostLayout from '../components/BlogPostLayout'\nimport siteMetadata from '../siteMetadata'\nimport posts from './posts'\n\n// Split the posts into a list of chunks of the given size, and\n// then build index pages for each chunk.\nlet chunks = chunk(posts, siteMetadata.indexPageSize)\nlet chunkPagePairs = chunks.map((chunk, i) => [\n  '/' + (i + 1),\n  map(async (req, context) => {\n    // Don't load anything when just crawling\n    if (req.method === 'HEAD') {\n      return route()\n    }\n\n    // Get metadata for all pages on this page\n    let postRoutes = await Promise.all(\n      chunk.map(async post => {\n        let href = join(context.blogRoot, 'posts', post.slug)\n        return await resolve({\n          // If you want to show the page content on the index page, set\n          // this to 'GET' to be able to access it.\n          method: 'HEAD',\n          routes,\n          url: href,\n        })\n      }),\n    )\n\n    // Only add a page number to the page title after the first index page.\n    let pageTitle = siteMetadata.title\n    if (i > 0) {\n      pageTitle += ` – page ${i + 1}`\n    }\n\n    return route({\n      title: pageTitle,\n      view: (\n        <BlogIndexPage\n          blogRoot={context.blogRoot}\n          pageNumber={i + 1}\n          pageCount={chunks.length}\n          postRoutes={postRoutes}\n        />\n      ),\n    })\n  }),\n])\n\nconst routes = compose(\n  withContext((req, context) => ({\n    ...context,\n    blogRoot: req.mountpath || '/',\n  })),\n  withView((req, context) => {\n    // Check if the current page is an index page by comparing the remaining\n    // portion of the URL's pathname with the index page paths.\n    let isViewingIndex = req.path === '/' || /^\\/page\\/\\d+$/.test(req.path)\n\n    // Render the application-wide layout\n    return (\n      <BlogLayout blogRoot={context.blogRoot} isViewingIndex={isViewingIndex} />\n    )\n  }),\n  mount({\n    // The blog's index pages go here. The first index page is mapped to the\n    // root URL, with a redirect from \"/page/1\". Subsequent index pages are\n    // mapped to \"/page/n\".\n    '/': chunkPagePairs.shift()[1],\n    '/page': mount({\n      '/1': redirect((req, context) => context.blogRoot),\n      ...fromPairs(chunkPagePairs),\n    }),\n\n    // Put posts under \"/posts\", so that they can be wrapped with a\n    // \"<BlogPostLayout />\" that configures MDX and adds a post-specific layout.\n    '/posts': compose(\n      withView((req, context) => (\n        <BlogPostLayout blogRoot={context.blogRoot} />\n      )),\n      mount(fromPairs(posts.map(post => ['/' + post.slug, post.getPage]))),\n    ),\n\n    // Miscellaneous pages can be added directly to the root switch.\n    '/tags': lazy(() => import('./tags')),\n    '/about': lazy(() => import('./about')),\n\n    // Only the statically built copy of the RSS feed is intended to be opened,\n    // but the route is defined here so that the static renderer will pick it\n    // up.\n    '/rss': route(),\n  }),\n)\n\nexport default routes\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoadingIndicator\":\"LoadingIndicator_LoadingIndicator__3KSl0\",\"active\":\"LoadingIndicator_active__3EncM\",\"LoadingIndicator-animation\":\"LoadingIndicator_LoadingIndicator-animation__2icwd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"BlogLayout_container__1fiRb\",\"title\":\"BlogLayout_title__3HyDU\"};","import React from 'react'\nimport { Link } from 'react-navi'\nimport ArticleMeta from './ArticleMeta'\nimport styles from './ArticleSummary.module.css'\n\nfunction ArticleSummary({ blogRoot, route }) {\n  return (\n    <article className={styles.ArticleSummary}>\n      <h2><Link href={route.url.href}>{route.title}</Link></h2>\n      <ArticleMeta blogRoot={blogRoot} meta={route.data} />\n      <p>{route.data.spoiler}</p>\n    </article>\n  )\n}\n\nexport default ArticleSummary","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ArticleSummary\":\"ArticleSummary_ArticleSummary__3I5Qk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Bio\":\"Bio_Bio__1ks_2\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ReactGA from 'react-ga';\n\n\nimport register from \"navi-scripts/register\";\nimport { createBrowserNavigation } from \"navi\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Router } from \"react-navi\";\nimport HelmetProvider from \"react-navi-helmet-async\";\nimport \"./index.module.css\";\nimport routes from \"./routes\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactGA.initialize('UA-155624787-1');\n// `register()` is responsible for exporting your app's pages and App\n// component to the static renderer, and for starting the app with the\n// `main()` function when running within a browser.\nregister({\n  // Specify the pages that navi-app should statically build, by passing in a\n  // Switch object.\n  routes,\n\n  // This will only be called when loading your app in the browser. It won't\n  // be called when performing static generation.\n  async main() {\n    let navigation = createBrowserNavigation({ routes });\n\n    // Wait until the navigation has loaded the page's content, or failed to do\n    // so. If you want to load other data in parallel while the initial page is\n    // loading, make sure to start loading before this line.\n    await navigation.getRoute();\n\n    // React requires that you call `ReactDOM.hydrate` if there is statically\n    // rendered content in the root element, but prefers us to call\n    // `ReactDOM.render` when it is empty.\n    let hasStaticContent = process.env.NODE_ENV === \"production\";\n    let renderer = hasStaticContent ? ReactDOM.hydrate : ReactDOM.render;\n\n    // Start react, passing in the current navigation state and\n    // rendering the top-level view.\n    renderer(\n      <HelmetProvider>\n        <Router navigation={navigation} />\n      </HelmetProvider>,\n      document.getElementById(\"root\")\n    )\n\n    // If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: http://bit.ly/CRA-PWA\n    serviceWorker.unregister();\n  }\n});\n"],"sourceRoot":""}